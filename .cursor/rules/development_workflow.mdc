---
description: This is a rough guideline on how to complete this project. This is not strict, it's simply a suggestion on what to do at what stage. 
globs: 
alwaysApply: false
---
# Development Workflow for Treasure Hunter

## 3-Day Development Timeline

### Day 1: Setup and Core Systems
1. **Morning**:
   - Set up project with Vite, Three.js, and TypeScript
   - Implement basic renderer and camera controls
   - Create simple environment prototype

2. **Afternoon**:
   - Implement player movement and controls
   - Set up basic game state management
   - Create simple UI elements

3. **Evening**:
   - Begin work on procedural level generation
   - Implement basic collision detection
   - Test basic gameplay loop

### Day 2: Gameplay Systems
1. **Morning**:
   - Refine level generation
   - Implement inventory system
   - Add item collection mechanics

2. **Afternoon**:
   - Add enemy entities with basic AI
   - Implement combat system
   - Create extraction mechanic

3. **Evening**:
   - Implement item effects and rarity system
   - Polish player movement and controls
   - Add basic audio

### Day 3: Polish and Deployment
1. **Morning**:
   - Add visual effects and improve lighting
   - Implement game menus and UI polish
   - Add tutorial elements

2. **Afternoon**:
   - Optimization pass (performance, mobile)
   - Bug fixing
   - Final balance adjustments

3. **Evening**:
   - Deployment preparation
   - Final testing on multiple devices
   - Submission

## Development Practices

### Version Control
- Commit frequently with descriptive messages
- Create branches for major features
- Use Git tags for important milestones

### Testing
- Test on both desktop and mobile frequently
- Get feedback early on core mechanics
- Focus on performance testing from day 1

### Prioritization
1. Core gameplay loop first
2. Essential systems second
3. Polish and extras last

### Scope Management
- Keep a "could cut" list of features that aren't essential
- Regularly evaluate progress against timeline
- Don't be afraid to simplify to meet deadline

### Performance Monitoring
- Check FPS regularly, especially on mobile
- Profile code if performance issues arise
- Optimize early rather than late

## Troubleshooting Common Issues

### Three.js Issues
- Check console for WebGL errors
- Verify that assets are loading correctly
- Test with simpler geometries if performance is poor

### Mobile Issues
- Test touch controls frequently
- Verify performance on lower-end devices
- Check for mobile-specific rendering issues

### Asset Management
- Keep backup copies of all assets
- Use asset placeholders initially
- Compress and optimize before final deployment

This workflow is designed to ensure steady progress while maintaining quality and meeting the competition deadline. 