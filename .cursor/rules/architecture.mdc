---
description: This is useful when needing to know the top down picture of the project we are building as it contains the entire architecture and structure of our project.
globs: 
alwaysApply: false
---
# Treasure Hunter - Game Architecture

## 1. Technology Stack
- **Framework**: Three.js
- **Language**: TypeScript
- **Build Tool**: Vite
- **Physics**: Simple custom collision detection (no heavy physics engine)
- **Audio**: Howler.js (lightweight audio library)
- **Deployment**: GitHub Pages or Vercel

## 2. Core Systems

### 2.1 Rendering System
- **Main Renderer**: Three.js WebGLRenderer
- **Camera**: Third-person perspective (OrbitControls or custom controller)
- **Scene Management**: Dynamic object loading/unloading based on player position
- **Lighting**: Basic directional light + ambient light (no heavy shadow calculations)
- **Post-processing**: Minimal (bloom effect only if performance allows)

### 2.2 Game Logic System
- **Game State Manager**: Handles different game states (menu, playing, game over)
- **Level Generator**: Procedural dungeon generation using predefined room templates
- **Entity Manager**: Tracks and updates all game entities
- **Inventory System**: Player inventory with collected items
- **Item System**: Different item types, rarities, and effects

### 2.3 Input System
- **Desktop Controls**: WASD/Arrow keys for movement, mouse for camera, click for actions
- **Mobile Controls**: Virtual joystick for movement, touch for actions, swipe for camera
- **Input Mapper**: Translates input to game actions based on platform

### 2.4 UI System
- **HUD**: Player health, inventory status, minimap
- **Menus**: Main menu, pause menu, game over screen
- **Tooltips**: Item information, tutorial hints
- **Responsive Design**: Adapts to different screen sizes

## 3. Game Entities

### 3.1 Player
- **Attributes**: Health, movement speed
- **Inventory**: Collected items, equipped items
- **Abilities**: Basic attack, interact with environment

### 3.2 Enemies
- **Types**: 2-3 simple enemy types with different behaviors
- **AI**: Basic pathfinding and attack patterns
- **Attributes**: Health, damage, movement speed

### 3.3 Items
- **Categories**: Weapons, health items, valuable treasures
- **Rarity Levels**: Common, Uncommon, Rare (affects stats and value)
- **Effects**: Different effects based on item type (damage boost, healing, etc.)

### 3.4 Environment
- **Room Types**: Entrance, treasure room, combat room, exit
- **Interactive Elements**: Chests, doors, traps
- **Decorative Elements**: Torches, rubble, vegetation (minimal for performance)

## 4. Game Flow

### 4.1 Game Loop
1. Player enters dungeon
2. Player navigates through rooms, fighting enemies and collecting items
3. Player decides when to extract with collected loot
4. If successful extraction, items are permanently added to inventory
5. If player dies, all newly collected items are lost
6. Player can enter a new dungeon with their persistent inventory

### 4.2 Progression
- Better items allow for deeper exploration
- Risk vs. reward decision-making
- No explicit levels, but difficulty increases with deeper exploration

## 5. Asset Pipeline

### 5.1 3D Models
- Low-poly models for all game elements
- Reuse geometries and materials when possible
- LOD (Level of Detail) for distant objects if needed

### 5.2 Textures
- Simple textures, minimal use
- Texture atlases for similar elements
- Procedural texturing where applicable

### 5.3 Audio
- Background ambient sounds (looped, low file size)
- Essential sound effects (combat, item collection, etc.)
- All audio files compressed and optimized

## 6. Optimization Strategies

### 6.1 Performance
- Object pooling for frequently created/destroyed objects
- Frustum culling (only render what's visible)
- Simplified physics calculations
- Limited draw distance

### 6.2 Loading
- Progressive asset loading during gameplay
- Preload essential assets before game starts
- Compress all assets appropriately

### 6.3 Mobile Optimization
- Reduced poly count and effects on mobile
- Touch-friendly UI elements
- Battery usage considerations (frame rate limiting option)

## 7. Project Structure

```
treasure-hunter/
├── src/
│   ├── main.ts                 # Entry point
│   ├── game.ts                 # Main game class
│   ├── config.ts               # Game configuration
│   ├── assets/                 # Asset management
│   │   ├── renderer.ts         # Rendering system
│   │   ├── input.ts            # Input handling
│   │   ├── audio.ts            # Audio system
│   │   └── ui.ts               # UI management
│   ├── entities/               # Game entities
│   │   ├── player.ts           # Player class
│   │   ├── enemy.ts            # Enemy class
│   │   ├── item.ts             # Item class
│   │   └── environment.ts      # Environment elements
│   ├── systems/                # Game systems
│   │   ├── levelGenerator.ts   # Level generation
│   │   ├── inventory.ts        # Inventory system
│   │   ├── combat.ts           # Combat system
│   │   └── gameState.ts        # Game state management
│   ├── utils/                  # Utility functions
│   └── types/                  # TypeScript type definitions
├── public/                     # Static assets
│   ├── models/                 # 3D models
│   ├── textures/               # Textures
│   └── audio/                  # Audio files
├── index.html                  # Main HTML file
└── package.json                # Project dependencies
```

This architecture is designed to be modular, maintainable, and optimized for quick development within the 3-day timeframe while meeting the competition requirements. 